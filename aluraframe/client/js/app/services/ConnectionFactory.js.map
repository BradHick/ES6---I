{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","close","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACQA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AACXC,gB,GAAa,I;;mCAILC,iB;AACV,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CAEqB;AACpB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,0BAAYI,eAAZ,GAA8B,aAAI;AAChCT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,eAFD;;AAIAR,0BAAYS,SAAZ,GAAwB,aAAI;AAC1B,oBAAG,CAACf,UAAJ,EAAe;AACbA,+BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAE,0BAAQhB,WAAWgB,KAAX,CAAiBC,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWgB,KAAX,GAAmB,YAAU;AAC3B,0BAAM,IAAId,KAAJ,CAAU,2CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQJ,UAAR;AACD,eATD;;AAWAM,0BAAYY,OAAZ,GAAsB,aAAI;AACxBC,wBAAQC,GAAR,CAAYR,EAAEC,MAAF,CAASQ,KAArB;AACAhB,uBAAOO,EAAEC,MAAF,CAASQ,KAAT,CAAeC,IAAtB;AACD,eAHD;AAID,aAtBM,CAAP;AAuBD;;;wCAEoBtB,U,EAAW;AAC9BH,mBAAO0B,OAAP,CAAe,iBAAS;AACtB,kBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC7C1B,2BAAW2B,iBAAX,CAA6BD,KAA7B;AACD;AACD1B,yBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACD,aALD;AAOD;;;6CAEwB;AACvB,gBAAG7B,UAAH,EAAc;AACZgB;AACAhB,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["\r\n  const stores = ['negociacoes'];\r\n  const version = 3;\r\n  const dbName = 'aluraframe';\r\n  var connection = null;\r\n  var close;\r\n\r\n\r\nexport  class ConnectionFactory {\r\n    constructor() {\r\n      throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n    }\r\n\r\n    static getConnection(){\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n        openRequest.onupgradeneeded = e =>{\r\n          ConnectionFactory._createStores(e.target.result);\r\n        };\r\n\r\n        openRequest.onsuccess = e =>{\r\n          if(!connection){\r\n            connection = e.target.result;\r\n            close = connection.close.bind(connection);\r\n            connection.close = function(){\r\n              throw new Error('Você não pode fechar diretmente a conexão');\r\n            }\r\n          }\r\n          resolve(connection);\r\n        };\r\n\r\n        openRequest.onerror = e =>{\r\n          console.log(e.target.error);\r\n          reject(e.target.error.name);\r\n        };\r\n      });\r\n    }\r\n\r\n    static _createStores(connection){\r\n      stores.forEach(store => {\r\n        if(connection.objectStoreNames.contains(store)){\r\n          connection.deleteObjectStore(store);\r\n        }\r\n        connection.createObjectStore(store, {autoIncrement: true});\r\n      });\r\n\r\n    }\r\n\r\n    static _closeConnection(){\r\n      if(connection){\r\n        close();\r\n        connection = null;\r\n      }\r\n    }\r\n\r\n  }\r\n"]}